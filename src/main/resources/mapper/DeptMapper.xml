<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.security.info.manage.mapper.DeptMapper">

    <insert id="syncOrg" parameterType="com.security.info.manage.dto.res.VxDeptResDTO">
        TRUNCATE TABLE sys_dept;
        insert into sys_dept(id, parent_id, org_code, org_name, sort, user_ids, create_by) values
        <foreach collection="list" index="index" item="dept" separator=",">
            (#{dept.id}, #{dept.parentid}, #{dept.name_en}, #{dept.name}, #{dept.order}, #{dept.department_leaders}, #{userId})
        </foreach>
        ;
    </insert>

    <select id="listSyncDept" resultType="com.security.info.manage.dto.res.DeptTreeResDTO">
        select id, parent_id, org_code, org_name, sort, user_ids, create_date from sys_dept where is_delete=0
    </select>

    <select id="getBody" resultType="com.security.info.manage.dto.res.DeptTreeResDTO">
        select id, parent_id, org_code, org_name, sort, user_ids, create_date from sys_dept where id!='1' and is_delete=0
    </select>

    <select id="getRoot" resultType="com.security.info.manage.dto.res.DeptTreeResDTO">
        select id, parent_id, org_code, org_name, sort, user_ids, create_date from sys_dept where id='1' and is_delete=0
    </select>

    <select id="listCompanyList" resultType="com.security.info.manage.dto.res.DeptTreeResDTO">
        select id, parent_id, org_name from sys_dept
        where parent_id='1' and is_delete=0
        order by sort
    </select>

    <select id="selectParent" resultType="com.security.info.manage.dto.res.DeptTreeResDTO">
        select d2.id, d2.parent_id, d2.org_code, d2.org_name, d2.sort, d2.user_ids, d2.create_date
        from sys_dept as d1
        left join sys_dept as d2 on d1.parent_id=d2.id and d2.is_delete=0
        where d1.id=#{deptId} and d1.is_delete=0
    </select>

    <select id="selectDepartmentUser" resultType="com.security.info.manage.dto.res.UserResDTO">
        select u.*, ue.real_name, d.org_name as dept_name, p.post_name as user_name
        from sys_dept as d
        left join sys_post as p on p.org_id=d.id and p.status=0 and p.is_delete=0
        <if test="dangerId==null">
            and p.post_name='科长'
        </if>
        <if test="dangerId!=null">
            and p.post_name in ('部长', '副部长')
        </if>
        left join sys_user_post as up on up.post_id=p.id
        left join sys_user as u on u.id=up.user_id and u.is_delete=0 and u.status=1
        left join sys_user_role as ur on u.id=ur.user_id
        left join sys_user_ext as ue on ue.user_id=u.id and ue.is_delete=0
        where
        <if test="type==1">
            d.parent_id=#{deptId} and d.is_delete=0 and u.id is not null
            <if test="dangerId==null">
                and d.org_name like CONCAT('%','科')
            </if>
            <if test="dangerId!=null">
                and d.org_name like CONCAT('%','部')
            </if>
        </if>
        <if test="type==2">
            d.id=#{deptId} and d.is_delete=0 and u.id is not null
        </if>
        group by u.id
    </select>

    <select id="upRecursion" resultType="java.lang.String">
        SELECT
        T2.id
        FROM
        (
        SELECT
        @r AS _id,
        (SELECT @r := parent_id FROM sys_dept WHERE id = _id ) AS 2v2,
        @l := @l + 1 AS lvl
        FROM
        ( SELECT @r := #{deptId}, @l := 0 ) vars,
        sys_dept h
        ) T1
        LEFT JOIN sys_dept T2 ON T1._id = T2.id
        WHERE
        T2.parent_id="1" and T2.id is not null

    </select>

    <select id="downRecursion" resultType="java.lang.String">
        SELECT
        DATA.id
        FROM
        (
        SELECT
        @ids AS _ids,
        (SELECT @ids := GROUP_CONCAT( id ) FROM sys_dept WHERE FIND_IN_SET(parent_id, @ids)) AS cids,
        @l := @l + 1 AS LEVEL
        FROM
        sys_dept,
        ( SELECT @ids := #{deptId}, @l := 0 ) b
        WHERE
        @ids IS NOT NULL
        ) ID,
        sys_dept DATA
        WHERE
        FIND_IN_SET( DATA.id, ID._ids )
        ORDER BY
        LEVEL
    </select>
</mapper>